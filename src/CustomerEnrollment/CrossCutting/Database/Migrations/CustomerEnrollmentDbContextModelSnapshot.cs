// <auto-generated />
using System;
using CustomerEnrollment.CrossCutting.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerEnrollment.CrossCutting.Database.Migrations
{
    [DbContext(typeof(CustomerEnrollmentDbContext))]
    partial class CustomerEnrollmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerEnrollment.OverdraftAccounts.Aggregates.OverdraftAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<bool>("IsOverdraftAccountActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsOverdraftAccountActive");

                    b.ToTable("OverdraftAccounts", (string)null);
                });

            modelBuilder.Entity("CustomerEnrollment.OverdraftContracts.OverdraftContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CanceledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsOverdraftContractActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LatePaymentPenaltyRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<decimal>("MonthlyInterestRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<decimal>("MonthlyLatePaymentInterestRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<decimal>("MonthlyOverLimitInterestRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<decimal>("OverLimitFixedFee")
                        .HasColumnType("decimal(19,8)");

                    b.Property<Guid>("OverdraftAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("SignatureDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsOverdraftContractActive");

                    b.HasIndex("OverdraftAccountId")
                        .IsUnique();

                    b.ToTable("OverdraftContracts", (string)null);
                });

            modelBuilder.Entity("CustomerEnrollment.OverdraftContracts.OverdraftContract", b =>
                {
                    b.HasOne("CustomerEnrollment.OverdraftAccounts.Aggregates.OverdraftAccount", null)
                        .WithOne()
                        .HasForeignKey("CustomerEnrollment.OverdraftContracts.OverdraftContract", "OverdraftAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
